#!/usr/bin/env python3

import pandas as pd
import argparse
import warnings
import os
import sys

def print_readme():
    """
    Print the usage instructions and readme for the script.
    """
    readme_text = """
    README:
    This script processes an ERP downloaded file.

    Run the following command if the program is running for the first time:
    # Step 1: Install Python and pip
    sudo apt update
    sudo apt install python3 python3-pip -y

    # Step 2: Install required dependencies
    pip install -r requirements.txt

    Usage:
    erpclean <filename>

    Arguments:
    <filename>    The name of the input file (a .csv file without spaces in the filename and without the ".csv" extension).

    NOTE: Column heading of the RUPEES value entry should be changed to "amount".
    """
    print(readme_text)

# Parse command-line arguments
parser = argparse.ArgumentParser(description="Process an ERP downloaded file.", add_help=False)
parser.add_argument("filename", type=str, nargs="?", help="Name of the input .csv file")
parser.add_argument("--help", "-h", action="store_true", help="Display usage instructions")

args = parser.parse_args()

# Display usage instructions if no file is provided or --help is used
if args.help or args.filename is None:
    print_readme()
    sys.exit()

# Extract the filename and check if the file exists
input_filename = args.filename
input_filepath = input_filename + ".csv"

if not os.path.isfile(input_filepath):
    print(f"Error: File '{input_filepath}' not found.")
    sys.exit()

# Constants for column names
COLUMN_AMOUNT = "amount"
COLUMN_ABS_VALUES = "Absolute Values"
COLUMN_INDEX = "index"

# Ignore warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

# Read the CSV file and preprocess the 'amount' column
erp_data = pd.read_csv(input_filepath)
erp_data[COLUMN_AMOUNT] = erp_data[COLUMN_AMOUNT].fillna('₹0.00')

def convert_currency(value):
    """
    Convert a currency string to a float value.
    """
    if isinstance(value, str):
        value = value.replace('₹', '').replace(',', '')
        if '-' in value:
            return -float(value.replace('-', ''))
        return float(value)
    return value

erp_data[COLUMN_AMOUNT] = erp_data[COLUMN_AMOUNT].apply(convert_currency)

total_value_before_processing = round(erp_data[COLUMN_AMOUNT].sum(), 2)

# Add helper columns and sort by absolute values
erp_data = pd.concat([erp_data, pd.DataFrame(columns=[COLUMN_ABS_VALUES, COLUMN_INDEX])], axis=1)
erp_data[COLUMN_ABS_VALUES] = erp_data[COLUMN_AMOUNT].abs()
erp_data[COLUMN_INDEX] = range(1, len(erp_data) + 1)
erp_data.sort_values(by=COLUMN_ABS_VALUES, ascending=False, inplace=True)

# Separate uncommon and discarded values
uncommon_values = pd.DataFrame(columns=erp_data.columns)
temporary_stack = pd.DataFrame(columns=erp_data.columns)
discarded_values = pd.DataFrame(columns=erp_data.columns)

value_stack = []

for _, row in erp_data.iterrows():
    value = row[COLUMN_AMOUNT]
    if not value_stack or value_stack[-1] != -value:
        if value_stack and (value != value_stack[-1]):
            uncommon_values = pd.concat([uncommon_values, temporary_stack], ignore_index=True)
            value_stack = []
            temporary_stack = pd.DataFrame(columns=erp_data.columns)
        value_stack.append(value)
        temporary_stack = pd.concat([temporary_stack, pd.DataFrame([row])], ignore_index=True)
    else:
        value_stack.pop()
        last_temp_row = temporary_stack.iloc[-1]
        temporary_stack = temporary_stack.iloc[:-1]
        discarded_values = pd.concat([discarded_values, pd.DataFrame([last_temp_row, row])], ignore_index=True)

if not temporary_stack.empty:
    uncommon_values = pd.concat([uncommon_values, temporary_stack], ignore_index=True)

total_value_after_processing = round(uncommon_values[COLUMN_AMOUNT].sum(), 2)
discarded_sum = discarded_values[COLUMN_AMOUNT].sum()

# Validate the processed values
if total_value_after_processing != total_value_before_processing and discarded_sum == 0:
    print("Error: The values are not matching after processing.")
    sys.exit()

# Prepare output filenames
cleaned_filename = input_filename + "-cleaned.csv"
discarded_filename = input_filename + "-discarded.csv"

# Delete existing files if present
for filepath in [cleaned_filename, discarded_filename]:
    if os.path.isfile(filepath):
        os.remove(filepath)

print("The values matched correctly.")

# Add debit, credit, and balance columns to the uncommon values
def add_balance_columns(df):
    df = pd.concat([pd.DataFrame(columns=["debit", "credit", "balance"]), df], axis=1)
    df["debit"] = df[COLUMN_AMOUNT].apply(lambda x: x if x > 0 else 0)
    df["credit"] = df[COLUMN_AMOUNT].apply(lambda x: -x if x < 0 else 0)
    df["balance"] = 0
    df.loc[0, "balance"] = round(df["credit"].iloc[0] - df["debit"].iloc[0], 2)
    for i in range(1, len(df)):
        df.loc[i, "balance"] = round(df.loc[i-1, "balance"] - df.loc[i, "debit"] + df.loc[i, "credit"], 2)
    return df

uncommon_values = add_balance_columns(uncommon_values)
discarded_values = add_balance_columns(discarded_values)

# Sort by index
uncommon_values.sort_values(by=COLUMN_INDEX, ascending=True, inplace=True)
discarded_values.sort_values(by=COLUMN_INDEX, ascending=True, inplace=True)

# Write to output files
uncommon_values.to_csv(cleaned_filename, index=False)
discarded_values.to_csv(discarded_filename, index=False)

print(f"{cleaned_filename} and {discarded_filename} created.")
